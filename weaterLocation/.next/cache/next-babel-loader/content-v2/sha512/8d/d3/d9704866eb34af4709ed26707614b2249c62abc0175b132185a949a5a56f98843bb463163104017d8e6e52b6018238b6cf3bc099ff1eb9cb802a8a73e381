{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/home/nathan-silva/Documentos/Repositorios/Estudo_ReactAPI/weather-location/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/nathan-silva/Documentos/Repositorios/Estudo_ReactAPI/weather-location/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/nathan-silva/Documentos/Repositorios/Estudo_ReactAPI/weather-location/src/pages/_app.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  _s();\n\n  var _useState = useState(false),\n      location = _useState[0],\n      setLocation = _useState[1];\n\n  var _useState2 = useState(false),\n      weather = _useState2[0],\n      setWeather = _useState2[1];\n\n  var getWeather = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(lat, _long) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return axios.get(\"http://api.openweathermap.org/data/2.5/weather\", {\n                params: {\n                  lat: lat,\n                  lon: _long,\n                  appid: '810e062d195188ad39edbeca39a16436',\n                  lang: 'pt',\n                  units: 'metric'\n                }\n              });\n\n            case 2:\n              res = _context.sent;\n              setWeather(res.data);\n              console.log(res.data);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getWeather(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      getWeather(position.coords.latitude, position.coords.longitude);\n      setLocation(true);\n    });\n  }, []);\n\n  if (location == false) {\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: \"Voc\\xEA precisa habilitar a localiza\\xE7\\xE3o no browser o/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this);\n  } else if (weather == false) {\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: \"Carregando o clima\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Cliema nas suas coordenadas (\", weather['weather'][0]['description'], \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Temperatura atual: \", weather['main']['temp'], \"\\xB0\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Temperatura maxima: \", weather['main']['temp_max'], \"\\xB0\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Temperatura minima: \", weather['main']['temp_min'], \"\\xB0\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Press\\xE3o: \", weather['main']['pressure'], \"\\xB0 hpa\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Umidade: \", weather['main']['humidity'], \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(App, \"3Yy4Em+h5dvlfVXQVM3wytPcOZ0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/nathan-silva/Documentos/Repositorios/Estudo_ReactAPI/weather-location/src/pages/_app.jsx"],"names":["React","Fragment","useState","useEffect","axios","App","location","setLocation","weather","setWeather","getWeather","lat","long","get","params","lon","appid","lang","units","res","data","console","log","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,GAAT,GAAgB;AAAA;;AAAA,kBAEoBH,QAAQ,CAAC,KAAD,CAF5B;AAAA,MAELI,QAFK;AAAA,MAEKC,WAFL;;AAAA,mBAGkBL,QAAQ,CAAC,KAAD,CAH1B;AAAA,MAGLM,OAHK;AAAA,MAGIC,UAHJ;;AAKZ,MAAIC,UAAU;AAAA,wEAAG,iBAAOC,GAAP,EAAYC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACGR,KAAK,CAACS,GAAN,CAAU,gDAAV,EAA4D;AACxEC,gBAAAA,MAAM,EAAE;AACJH,kBAAAA,GAAG,EAAEA,GADD;AAEJI,kBAAAA,GAAG,EAAEH,KAFD;AAGJI,kBAAAA,KAAK,EAAE,kCAHH;AAIJC,kBAAAA,IAAI,EAAE,IAJF;AAKJC,kBAAAA,KAAK,EAAE;AALH;AADgE,eAA5D,CADH;;AAAA;AACTC,cAAAA,GADS;AAUbV,cAAAA,UAAU,CAACU,GAAG,CAACC,IAAL,CAAV;AACAC,cAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACC,IAAhB;;AAXa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAVV,UAAU;AAAA;AAAA;AAAA,KAAd;;AAcAP,EAAAA,SAAS,CAAC,YAAM;AACZoB,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAACC,QAAD,EAAc;AACnDhB,MAAAA,UAAU,CAACgB,QAAQ,CAACC,MAAT,CAAgBC,QAAjB,EAA2BF,QAAQ,CAACC,MAAT,CAAgBE,SAA3C,CAAV;AACAtB,MAAAA,WAAW,CAAC,IAAD,CAAX;AACH,KAHD;AAIH,GALQ,EAKN,EALM,CAAT;;AAOA,MAAID,QAAQ,IAAI,KAAhB,EAAwB;AACpB,wBACI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAIE,GALN,MAMK,IAAIE,OAAO,IAAI,KAAf,EAAsB;AACvB,wBACI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GANI,MAOA;AACD,wBACI,QAAC,QAAD;AAAA,8BACI;AAAA,oDAAmCA,OAAO,CAAC,SAAD,CAAP,CAAmB,CAAnB,EAAsB,aAAtB,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,gCACI;AAAA,4CAAyBA,OAAO,CAAC,MAAD,CAAP,CAAgB,MAAhB,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,6CAA0BA,OAAO,CAAC,MAAD,CAAP,CAAgB,UAAhB,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA,6CAA0BA,OAAO,CAAC,MAAD,CAAP,CAAgB,UAAhB,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAA,qCAAeA,OAAO,CAAC,MAAD,CAAP,CAAgB,UAAhB,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAA,kCAAeA,OAAO,CAAC,MAAD,CAAP,CAAgB,UAAhB,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAUI;AAAA;AAAA;AAAA;AAAA,cAVJ,eAWI;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAiBH;AAEJ;;GA3DQH,G;;KAAAA,G;AA6DT,eAAeA,GAAf","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction App () {\n\n    const [location, setLocation] = useState(false);\n    const [weather, setWeather] = useState(false);\n\n    let getWeather = async (lat, long) => {\n        let res = await axios.get(\"http://api.openweathermap.org/data/2.5/weather\", {\n            params: {\n                lat: lat,\n                lon: long,\n                appid: '810e062d195188ad39edbeca39a16436',\n                lang: 'pt',\n                units: 'metric'\n            }\n        });\n        setWeather(res.data)\n        console.log(res.data)\n    }\n\n    useEffect(() => {\n        navigator.geolocation.getCurrentPosition((position) => {\n            getWeather(position.coords.latitude, position.coords.longitude);\n            setLocation(true)\n        })\n    }, [])\n\n    if (location == false ) {\n        return (\n            <Fragment>\n                Você precisa habilitar a localização no browser o/\n            </Fragment>\n        )}\n    else if (weather == false) {\n        return (\n            <Fragment>\n                Carregando o clima\n            </Fragment>\n        )\n    }\n    else {\n        return (\n            <Fragment>\n                <h3>Cliema nas suas coordenadas ({ weather['weather'][0]['description'] })</h3>\n                <hr/>\n                <ul>\n                    <li>Temperatura atual: { weather['main']['temp'] }°</li>\n                    <li>Temperatura maxima: { weather['main']['temp_max'] }°</li>\n                    <li>Temperatura minima: { weather['main']['temp_min'] }°</li>\n                    <li>Pressão: { weather['main']['pressure'] }° hpa</li>\n                    <li>Umidade: { weather['main']['humidity'] }%</li>\n                </ul>\n                <hr/>\n                <p>\n                    {}\n                </p>\n            </Fragment>\n        );\n    }\n    \n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}